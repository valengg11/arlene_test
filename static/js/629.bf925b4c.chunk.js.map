{"version":3,"file":"static/js/629.bf925b4c.chunk.js","mappings":"+OAsHA,UA9GoB,WAClB,IAIIA,EAJEC,GAAWC,EAAAA,EAAAA,MACTC,GAAaC,EAAAA,EAAAA,YAAWC,EAAAA,GAAxBF,SACFG,GAASC,EAAAA,EAAAA,QAAO,MAChBC,GAAOD,EAAAA,EAAAA,QAAO,MAMpB,GAA2CE,EAAAA,EAAAA,GAJvB,CAClBC,MAAO,GACPC,SAAU,KAEZ,eAAOC,EAAP,KAAeC,EAAf,KAAkCC,EAAlC,KACQJ,EAAoBE,EAApBF,MAAOC,EAAaC,EAAbD,SASTI,EAAe,WACnBd,EAAS,UAGLe,EAAc,WAClB,IAAMC,EAAW,CACfP,MAAOA,EACPC,SAAUA,GAEZL,EAAOY,QAAQC,UAAY,UAC3Bb,EAAOY,QAAQE,UAAW,EAC1BC,IAAAA,KACQ,8BAA+BJ,GACpCK,MAAK,SAACC,GACLvB,EAAQuB,EAASC,KAAKxB,MACtB,IAAMyB,EAAS,CACbC,KAAMC,EAAAA,EAAAA,MACNC,QAAS,CAAE5B,MAAOA,IAEpBG,EAASsB,GACTX,IACAN,EAAKU,QAAQW,UAAUC,IAAI,aAC3BC,WAAWhB,EAAc,QAE1BiB,OAAM,SAACC,GACNC,QAAQD,MAAMA,GACd3B,EAAOY,QAAQC,UAAY,SAC3Bb,EAAOY,QAAQE,UAAW,EAC1Be,IAAAA,KAAU,CACRC,MAAM,8BACNC,KAAM,QACNC,kBAAmB,WAK3B,OACE,iBAAKC,UAAU,eAAf,WACE,SAAC,KAAD,CAAMC,GAAG,IAAID,UAAU,aAAvB,UACE,gBAAKA,UAAU,cAAf,UACE,cAAGA,UAAU,2BAGjB,iBAAKA,UAAU,cAAf,WACE,eAAIA,UAAU,aAAd,qBACA,gDAEF,kBAAME,SAtDW,SAACC,GACpBA,EAAEC,iBACFT,QAAQU,IAAIhC,GAEZI,KAkDgC6B,IAAKrC,EAAM+B,UAAU,aAAnD,WACE,kBAAOO,QAAQ,QAAf,qBACA,kBACEpB,KAAK,OACLqB,KAAK,QACLR,UAAU,cACVS,aAAa,MACbC,MAAOvC,EACPwC,SAAUrC,EACVsC,UAAQ,KAEV,kBAAOL,QAAQ,WAAf,uBACA,kBACEpB,KAAK,WACLqB,KAAK,WACLR,UAAU,cACVU,MAAOtC,EACPuC,SAAUrC,EACVsC,UAAQ,KAEV,mBACEN,IAAKvC,EACLoB,KAAK,SACLa,UAAU,+BAHZ,qBAOA,iBAAKA,UAAU,wBAAf,WACE,6CACA,iBAAKA,UAAU,sBAAf,WACE,gBAAKA,UAAU,qBAAf,UACE,cAAGA,UAAU,yBAEf,gBAAKA,UAAU,qBAAf,UACE,cAAGA,UAAU,kC,iEC1F3B,IAjBgB,WAAwB,IAAvBa,EAAsB,uDAAP,GAC9B,GAA4BC,EAAAA,EAAAA,UAASD,GAArC,eAAOxC,EAAP,KAAe0C,EAAf,KAEMxC,EAAQ,WACZwC,EAAUF,IAGNvC,EAAoB,SAAC,GAAgB,IAAd0C,EAAa,EAAbA,OAC3BD,GAAU,kBACL1C,GADI,cAEN2C,EAAOR,KAAOQ,EAAON,UAI1B,MAAO,CAACrC,EAAQC,EAAmBC","sources":["components/auth/LoginScreen.js","hooks/useForm.js"],"sourcesContent":["import React, { useContext, useRef } from \"react\";\nimport { Link, useNavigate } from \"react-router-dom\";\nimport useForm from \"../../hooks/useForm\";\nimport axios from \"axios\";\nimport Swal from \"sweetalert2\";\nimport { types } from \"../../types/types\";\nimport { AuthContext } from \"../../auth/authContext\";\n\nconst LoginScreen = () => {\n  const navigate = useNavigate();\n  const { dispatch } = useContext(AuthContext);\n  const button = useRef(null);\n  const form = useRef(null);\n  let token;\n  const initialForm = {\n    email: \"\",\n    password: \"\",\n  };\n  const [values, handleInputChange, reset] = useForm(initialForm);\n  const { email, password } = values;\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    console.log(values);\n\n    handleLogin();\n  };\n\n  const navigateMain = () => {\n    navigate(\"/main\");\n  };\n\n  const handleLogin = () => {\n    const userData = {\n      email: email,\n      password: password,\n    };\n    button.current.innerHTML = \"Loading\";\n    button.current.disabled = true;\n    axios\n      .post(\"https://reqres.in/api/login\", userData)\n      .then((response) => {\n        token = response.data.token;\n        const action = {\n          type: types.login,\n          payload: { token: token },\n        };\n        dispatch(action);\n        reset();\n        form.current.classList.add(\"disappear\");\n        setTimeout(navigateMain, 2000);\n      })\n      .catch((error) => {\n        console.error(error);\n        button.current.innerHTML = \"Log in\";\n        button.current.disabled = false;\n        Swal.fire({\n          title: `Sorry, the data is invalid!`,\n          icon: \"error\",\n          confirmButtonText: \"Ok\",\n        });\n      });\n  };\n\n  return (\n    <div className=\"auth__screen\">\n      <Link to=\"/\" className=\"auth__link\">\n        <div className=\"auth__arrow\">\n          <i className=\"fas fa-arrow-left\"></i>\n        </div>\n      </Link>\n      <div className=\"auth__title\">\n        <h1 className=\"mb-1 title\">Log in</h1>\n        <span>Welcome back!</span>\n      </div>\n      <form onSubmit={handleSubmit} ref={form} className=\"auth__form\">\n        <label htmlFor=\"email\">E-mail</label>\n        <input\n          type=\"text\"\n          name=\"email\"\n          className=\"auth__input\"\n          autoComplete=\"off\"\n          value={email}\n          onChange={handleInputChange}\n          required\n        />\n        <label htmlFor=\"password\">Password</label>\n        <input\n          type=\"password\"\n          name=\"password\"\n          className=\"auth__input\"\n          value={password}\n          onChange={handleInputChange}\n          required\n        />\n        <button\n          ref={button}\n          type=\"submit\"\n          className=\"btn btn-primary pointer mt-4\"\n        >\n          Log in\n        </button>\n        <div className=\"auth__social-networks\">\n          <p>or continue with</p>\n          <div className=\"auth__network-icons\">\n            <div className=\"auth__icon-wrapper\">\n              <i className=\"fab fa-facebook-f\"></i>\n            </div>\n            <div className=\"auth__icon-wrapper\">\n              <i className=\"fab fa-google\"></i>\n            </div>\n          </div>\n        </div>\n      </form>\n    </div>\n  );\n};\n\nexport default LoginScreen;\n","import { useState } from \"react\";\n\nconst useForm = (initialState = {}) => {\n  const [values, setValues] = useState(initialState);\n\n  const reset = () => {\n    setValues(initialState);\n  };\n\n  const handleInputChange = ({ target }) => {\n    setValues({\n      ...values,\n      [target.name]: target.value,\n    });\n  };\n\n  return [values, handleInputChange, reset];\n};\n\nexport default useForm;"],"names":["token","navigate","useNavigate","dispatch","useContext","AuthContext","button","useRef","form","useForm","email","password","values","handleInputChange","reset","navigateMain","handleLogin","userData","current","innerHTML","disabled","axios","then","response","data","action","type","types","payload","classList","add","setTimeout","catch","error","console","Swal","title","icon","confirmButtonText","className","to","onSubmit","e","preventDefault","log","ref","htmlFor","name","autoComplete","value","onChange","required","initialState","useState","setValues","target"],"sourceRoot":""}